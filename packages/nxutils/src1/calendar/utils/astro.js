var J2000 = 2451545.0,
    JulianCentury = 36525.0,
    JulianMillennium = JulianCentury * 10,
    AstronomicalUnit = 149597870.0,
    TropicalYear = 365.24219878,
    oTerms = [-4680.93, -1.55, 1999.25, -51.38, -249.67, -39.05, 7.12, 27.87, 5.79, 2.45];

function obliqEq(jd) {
    var v = (jd - J2000) / (JulianCentury * 100),
        eps = 23 + 26 / 60.0 + 21.448 / 3600.0,
        u = v;

    if (abs(u) < 1.0) for (var i = 0; i < 10; i++) {
        eps += (oTerms[i] / 3600.0) * v;
        v *= u;
    }

    return eps;
}


var nutArgMultipliers = [0, 0, 0, 0, 1,
                         -2, 0, 0, 2, 2,
                         0, 0, 0, 2, 2,
                         0, 0, 0, 0, 2,
                         0, 1, 0, 0, 0,
                         0, 0, 1, 0, 0,
                         -2, 1, 0, 2, 2,
                         0, 0, 0, 2, 1,
                         0, 0, 1, 2, 2,
                         -2, -1, 0, 2, 2,
                         -2, 0, 1, 0, 0,
                         -2, 0, 0, 2, 1,
                         0, 0, -1, 2, 2,
                         2, 0, 0, 0, 0,
                         0, 0, 1, 0, 1,
                         2, 0, -1, 2, 2,
                         0, 0, -1, 0, 1,
                         0, 0, 1, 2, 1,
                         -2, 0, 2, 0, 0,
                         0, 0, -2, 2, 1,
                         2, 0, 0, 2, 2,
                         0, 0, 2, 2, 2,
                         0, 0, 2, 0, 0,
                         -2, 0, 1, 2, 2,
                         0, 0, 0, 2, 0,
                         -2, 0, 0, 2, 0,
                         0, 0, -1, 2, 1,
                         0, 2, 0, 0, 0,
                         2, 0, -1, 0, 1,
                         -2, 2, 0, 2, 2,
                         0, 1, 0, 0, 1,
                         -2, 0, 1, 0, 1,
                         0, -1, 0, 0, 1,
                         0, 0, 2, -2, 0,
                         2, 0, -1, 2, 1,
                         2, 0, 1, 2, 2,
                         0, 1, 0, 2, 2,
                         -2, 1, 1, 0, 0,
                         0, -1, 0, 2, 2,
                         2, 0, 0, 2, 1,
                         2, 0, 1, 0, 0,
                         -2, 0, 2, 2, 2,
                         -2, 0, 1, 2, 1,
                         2, 0, -2, 0, 1,
                         2, 0, 0, 0, 1,
                         0, -1, 1, 0, 0,
                         -2, -1, 0, 2, 1,
                         -2, 0, 0, 0, 1,
                         0, 0, 2, 2, 1,
                         -2, 0, 2, 0, 1,
                         -2, 1, 0, 2, 1,
                         0, 0, 1, -2, 0,
                         -1, 0, 1, 0, 0,
                         -2, 1, 0, 0, 0,
                         1, 0, 0, 0, 0,
                         0, 0, 1, 2, 0,
                         -1, -1, 1, 0, 0,
                         0, 1, 1, 0, 0,
                         0, -1, 1, 2, 2,
                         2, -1, -1, 2, 2,
                         0, 0, -2, 2, 2,
                         0, 0, 3, 2, 2,
                         2, -1, 0, 2, 2];

var nutArgCoefficient = [-171996, -1742, 92095, 89,
                         -13187, -16, 5736, -31,
                         -2274, -2, 977, -5,
                         2062, 2, -895, 5,
                         1426, -34, 54, -1,
                         712, 1, -7, 0,
                         -517, 12, 224, -6,
                         -386, -4, 200, 0,
                         -301, 0, 129, -1,
                         217, -5, -95, 3,
                         -158, 0, 0, 0,
                         129, 1, -70, 0,
                         123, 0, -53, 0,
                         63, 0, 0, 0,
                         63, 1, -33, 0,
                         -59, 0, 26, 0,
                         -58, -1, 32, 0,
                         -51, 0, 27, 0,
                         48, 0, 0, 0,
                         46, 0, -24, 0,
                         -38, 0, 16, 0,
                         -31, 0, 13, 0,
                         29, 0, 0, 0,
                         29, 0, -12, 0,
                         26, 0, 0, 0,
                         -22, 0, 0, 0,
                         21, 0, -10, 0,
                         17, -1, 0, 0,
                         16, 0, -8, 0,
                         -16, 1, 7, 0,
                         -15, 0, 9, 0,
                         -13, 0, 7, 0,
                         -12, 0, 6, 0,
                         11, 0, 0, 0,
                         -10, 0, 5, 0,
                         -8, 0, 3, 0,
                         7, 0, -3, 0,
                         -7, 0, 0, 0,
                         -7, 0, 3, 0,
                         -7, 0, 3, 0,
                         6, 0, 0, 0,
                         6, 0, -3, 0,
                         6, 0, -3, 0,
                         -6, 0, 3, 0,
                         -6, 0, 3, 0,
                         5, 0, 0, 0,
                         -5, 0, 3, 0,
                         -5, 0, 3, 0,
                         -5, 0, 3, 0,
                         4, 0, 0, 0,
                         4, 0, 0, 0,
                         4, 0, 0, 0,
                         -4, 0, 0, 0,
                         -4, 0, 0, 0,
                         -4, 0, 0, 0,
                         3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0,
                         -3, 0, 0, 0];


function nutation(jd) {
    var t = (jd - 2451545.0) / 36525.0,
        t2 = t * t, t3 = t * t2,
        ta = [
            dtr(297.850363 + 445267.11148 * t - 0.0019142 * t2 + t3 / 189474.0),
            dtr(357.52772 + 35999.05034 * t - 0.0001603 * t2 - t3 / 300000.0),
            dtr(134.96298 + 477198.867398 * t + 0.0086972 * t2 + t3 / 56250.0),
            dtr(93.27191 + 483202.017538 * t - 0.0036825 * t2 + t3 / 327270),
            dtr(125.04452 - 1934.136261 * t + 0.0020708 * t2 + t3 / 450000.0)
        ];

    for (var i = 0; i < 5; i++)
        ta[i] = fixAngr(ta[i]);

    var to10 = t / 10.0,
        dp = 0, de = 0;

    for (i = 0; i < 63; i++) {
        var ang = 0;
        for (var j = 0; j < 5; j++)
            if (nutArgMultipliers[(i * 5) + j] != 0)
                ang += nutArgMultipliers[i * 5 + j] * ta[j];

        dp += (nutArgCoefficient[i * 4 + 0] + nutArgCoefficient[i * 4 + 1] * to10) * sin(ang);
        de += (nutArgCoefficient[i * 4 + 2] + nutArgCoefficient[i * 4 + 3] * to10) * cos(ang);
    }

    return [
        dp / (3600.0 * 10000.0),
        de / (3600.0 * 10000.0)
    ];
}


function ecliptoEq(jd, Lambda, Beta) {
    var eps = dtr(obliqEq(jd));
    return [
        fixAngle(rtd(atan2(cos(eps) * dSin(Lambda) - tan(dtr(Beta)) * sin(eps), dCos(Lambda)))),
        rtd(asin(sin(eps) * dSin(Lambda) * dCos(Beta) + dSin(Beta) * cos(eps)))
    ];
}


var deltaTTab = [121, 112, 103, 95, 88, 82, 77, 72, 68, 63, 60, 56, 53, 51, 48, 46,
                 44, 42, 40, 38, 35, 33, 31, 29, 26, 24, 22, 20, 18, 16, 14, 12,
                 11, 10, 9, 8, 7, 7, 7, 7, 7, 7, 8, 8, 9, 9, 9, 9, 9, 10, 10, 10,
                 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 12, 12, 12, 12, 13, 13,
                 13, 14, 14, 14, 14, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16,
                 16, 16, 15, 15, 14, 13, 13.1, 12.5, 12.2, 12, 12, 12, 12, 12, 12,
                 11.9, 11.6, 11, 10.2, 9.2, 8.2, 7.1, 6.2, 5.6, 5.4, 5.3, 5.4, 5.6,
                 5.9, 6.2, 6.5, 6.8, 7.1, 7.3, 7.5, 7.6, 7.7, 7.3, 6.2, 5.2, 2.7,
                 1.4, -1.2, -2.8, -3.8, -4.8, -5.5, -5.3, -5.6, -5.7, -5.9, -6,
                 -6.3, -6.5, -6.2, -4.7, -2.8, -0.1, 2.6, 5.3, 7.7, 10.4, 13.3, 16,
                 18.2, 20.2, 21.1, 22.4, 23.5, 23.8, 24.3, 24, 23.9, 23.9, 23.7,
                 24, 24.3, 25.3, 26.2, 27.3, 28.2, 29.1, 30, 30.7, 31.4, 32.2,
                 33.1, 34, 35, 36.5, 38.3, 40.2, 42.2, 44.5, 46.5, 48.5, 50.5,
                 52.2, 53.8, 54.9, 55.8, 56.9, 58.3, 60, 61.6, 63, 65, 66.6];

function deltaT(year) {
    if (year >= 1620 && year <= 2000) {
        var i = floor((year - 1620) / 2);
        return deltaTTab[i]
            + (deltaTTab[i + 1] - deltaTTab[i]) * ((year - 1620) / 2 - i);
    }
    else {
        var t = (year - 2000) / 100;
        return year < 948
            ? 2177 + 497 * t + 44.1 * t * t
            : 102 + 102 * t
               + 25.3 * t * t
               + (year > 2000 && year < 2100 ? 0.37 * (year - 2100) : 0);
    }
}


var EquinoxpTerms = [485, 324.96, 1934.136,
                     203, 337.23, 32964.467,
                     199, 342.08, 20.186,
                     182, 27.85, 445267.112,
                     156, 73.14, 45036.886,
                     136, 171.52, 22518.443,
                     77, 222.54, 65928.934,
                     74, 296.72, 3034.906,
                     70, 243.58, 9037.513,
                     58, 119.81, 33718.147,
                     52, 297.17, 150.678,
                     50, 21.02, 2281.226,
                     45, 247.54, 29929.562,
                     44, 325.15, 31555.956,
                     29, 60.93, 4443.417,
                     18, 155.12, 67555.328,
                     17, 288.79, 4562.452,
                     16, 198.04, 62894.029,
                     14, 199.76, 31436.921,
                     12, 95.39, 14577.848,
                     12, 287.11, 31931.756,
                     12, 320.81, 34777.259,
                     9, 227.73, 1222.114,
                     8, 15.45, 16859.074];

var JDE0tab1000 = [
    [1721139.29189, 365242.13740, 0.06134, 0.00111, -0.00071],
    [1721233.25401, 365241.72562, -0.05323, 0.00907, 0.00025],
    [1721325.70455, 365242.49558, -0.11677, -0.00297, 0.00074],
    [1721414.39987, 365242.88257, -0.00769, -0.00933, -0.00006]
];

var JDE0tab2000 = [
    [2451623.80984, 365242.37404, 0.05169, -0.00411, -0.00057],
    [2451716.56767, 365241.62603, 0.00325, 0.00888, -0.00030],
    [2451810.21715, 365242.01767, -0.11575, 0.00337, 0.00078],
    [2451900.05952, 365242.74049, -0.06223, -0.00823, 0.00032]
];

function equinox(year, which) {
    if (year < 1000) {
        var jde0Tab = JDE0tab1000,
            y = year / 1000;
    }
    else {
        jde0Tab = JDE0tab2000;
        y = (year - 2000) / 1000;
    }

    var y2 = y * y,
        JDE0 = jde0Tab[which][0] +
            jde0Tab[which][1] * y +
            jde0Tab[which][2] * y2 +
            jde0Tab[which][3] * y2 * y +
            jde0Tab[which][4] * y2 * y2,
        t = (JDE0 - 2451545.0) / 36525,
        w = 35999.373 * t - 2.47,
        deltaL = 1 + 0.0334 * dCos(w) + 0.0007 * dCos(2 * w);

    for (var i = 0, j = 0, s = 0; i < 24; i++) {
        s += EquinoxpTerms[j] * dCos(EquinoxpTerms[j + 1] + EquinoxpTerms[j + 2] * t);
        j += 3;
    }

    return JDE0 + s * 0.00001 / deltaL;
}


function sunPos(jd) {
    var T = (jd - J2000) / JulianCentury,
        T2 = T * T,
        L0 = fixAngle(280.46646 + 36000.76983 * T + 0.0003032 * T2),
        M = fixAngle(357.52911 + 35999.05029 * T - 0.0001537 * T2),
        e = 0.016708634 - 0.000042037 * T - 0.0000001267 * T2,
        C = (1.914602 - 0.004817 * T - 0.000014 * T2) * dSin(M)
            + (0.019993 - 0.000101 * T) * dSin(2 * M)
            + 0.000289 * dSin(3 * M),
        sunLong = L0 + C,
        sunAnomaly = M + C,
        sunR = 1.000001018 * (1 - e * e) / (1 + e * dCos(sunAnomaly)),
        Omega = 125.04 - 1934.136 * T,
        Lambda = sunLong - 0.00569 - 0.00478 * dSin(Omega),
        epsilon0 = obliqEq(jd),
        epsilon = epsilon0 + (0.00256 * dCos(Omega)),
        Alpha = fixAngle(rtd(atan2(dCos(epsilon0) * dSin(sunLong), dCos(sunLong)))),
        Delta = rtd(asin(dSin(epsilon0) * dSin(sunLong))),
        AlphaApp = fixAngle(rtd(atan2(dCos(epsilon) * dSin(Lambda), dCos(Lambda)))),
        DeltaApp = rtd(asin(dSin(epsilon) * dSin(Lambda)));

    return [L0, M, e, C, sunLong, sunAnomaly, sunR, Lambda, Alpha, Delta, AlphaApp, DeltaApp];
}


function equationOfTime(jd) {
    var tau = (jd - J2000) / JulianMillennium,
        tau2 = tau * tau,
        tau4 = tau2 * tau2,
        E = fixAngle(280.4664567
                + 360007.6982779 * tau
                + 0.03032028 * tau2
                + tau2 * tau / 49931
                - tau4 / 15300
                - tau4 * tau / 2000000)
            - 0.0057183 - sunPos(jd)[10]
            + nutation(jd)[0] * dCos(obliqEq(jd) + nutation(jd)[1])
            - 20.0 * floor(E / 20.0);

    return E / (24 * 60);
}
